/* 
========================================
Variables
========================================
*/

:root {
	/* dark shades of primary color*/
	--clr-primary-1: hsl(216, 99%, 37%);
	--clr-primary-2: hsl(216, 99%, 43%);
	--clr-primary-3: hsl(216, 99%, 50%);
	--clr-primary-4: hsl(216, 99%, 57%);
	/* primary/main color */
	--clr-primary-5: hsl(216, 99%, 63%);
	/* lighter shades of primary color */
	--clr-primary-6: hsl(216, 99%, 70%);
	--clr-primary-7: hsl(216, 98%, 77%);
	--clr-primary-8: hsl(216, 100%, 83%);
	--clr-primary-9: hsl(215, 100%, 90%);
	--clr-primary-10: hsl(215, 100%, 97%);
	/* darkest grey - used for headings */
	--clr-grey-1: hsl(209, 61%, 16%);
	--clr-grey-2: hsl(211, 39%, 23%);
	--clr-grey-3: hsl(209, 34%, 30%);
	--clr-grey-4: hsl(209, 28%, 39%);
	/* grey used for paragraphs */
	--clr-grey-5: hsl(210, 22%, 49%);
	--clr-grey-6: hsl(209, 23%, 60%);
	--clr-grey-7: hsl(211, 27%, 70%);
	--clr-grey-8: hsl(210, 31%, 80%);
	--clr-grey-9: hsl(212, 33%, 89%);
	--clr-grey-10: hsl(210, 36%, 96%);
	/* end of color from other project */
	--primaryColor: #f15025;
	--mainBlack: #222;
	--mainWhite: #fff;
	--offWhite: #f7f7f7;
	--darkGray: #afafaf;
	--darkGrey: #afafaf;
	--mainTransition: all 0.3s linear;
	--mainSpacing: 0.1rem;
	--borderRadius: 0.5rem;
}

/* 
========================================
Global Styles
========================================
*/

/* css reset */
* {
	margin: 0;
	padding: 0;
	box-sizing: border-box;
}

body {
	font-family: 'Fira Code', monospace;
	color: var(--clr-grey-1);
	background: var(--clr-grey-10);
	line-height: 1.5;
}

a {
	text-decoration: none;
}

img {
	width: 100%;
	display: block;
}

h1,
h2,
h3,
h4 {
	letter-spacing: var(--mainSpacing);
	text-transform: capitalize;
	margin-bottom: 1.25rem;
	font-weight: 400;
}

h1 {
	font-size: 3rem;
}

h2 {
	margin-bottom: 0;
}

p {
	font-weight: 300;
	font-size: 0.7rem;
	line-height: 2;
}

/* "button" */
.btn {
	display: inline-block;
	padding: 0.5rem 1.5rem;
	text-transform: capitalize;
	border: 3px solid var(--clr-primary-5);
	color: var(--clr-primary-5);
	margin: 2rem;
	border-radius: var(--borderRadius);
	transition: var(--mainTransition);
}

.btn:hover {
	background: var(--clr-primary-5);
	color: var(--mainWhite);
}

/* 
========================================
Main Navbar
========================================
*/

.main-navbar {
	position: fixed;
	top: 0;
	left: 0;
	width: 100%;
	background: var(--clr-primary-9);
	padding: 0 2rem;
}

.main-navbar li {
	list-style-type: none;
}

.main-navbar a {
	text-transform: capitalize;
	display: block;
	padding: 1rem 0;
	color: var(--clr-primary-5);
	font-weight: 600;
	letter-spacing: var(--mainSpacing);
	transition: var(--mainTransition);
}

.main-navbar a:hover {
	background: var(--clr-primary-5);
	color: var(--mainWhite);
	padding: 1rem 1.5rem;
}
.index-banner p{
	text-transform: capitalize;
}

@media screen and (min-width: 768px) {
	.main-navbar ul {
		/* john likes to have the navbar content container max out at 1170px, so this is why he adds this */
		max-width: 1170px;
		/* this declaration below places the navbar container in the center of the screen */
		margin: 0 auto;
		/* border: 2px solid red; */
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		/* this declaration below centers the navbar content container in the center of the screen, it is an alternative to the css declarations using the .main-navbar declarations below. */
		/* justify-items: center; */
	}
	/* we want to align out <a> links in the center of the columns, and, it seems, the easiest way to accomplish this is text-align: center. We can also use the justify-self: center. */
	.main-navbar a {
		/* john used the css declaration of 'text-align', but I've chosen the justify-self to practice using grid properties */
		/* text-align: center; */
		justify-self: center;
	}
	#index-header {
		background: linear-gradient(
				hsla(216, 99%, 50%, 0.1),
				hsla(216, 99%, 50%, 0.1)
			),
			url('../images/outback.jpg') center/cover fixed no-repeat;
	}
}

/* 
========================================
Main Hero
========================================
*/

.hero-header {
	min-height: 100vh;
	background-color: var(--clr-primary-5);
	color: var(--mainWhite);
	display: grid;
	/* these two properties align the children elements in the 'center' (but not the text within the .hero-banner) */
	justify-content: center;
	align-items: center;
}

.hero-banner {
	/* border: 3px solid var(--mainWhite); */
	text-align: center;
}

.hero-banner p {
	width: 80%;
	max-width: 560px;
	font-size: 1rem;
	margin: 0 auto;
}

.hero-banner .btn {
	border: 3px solid var(--clr-primary-10);
	color: var(--clr-primary-10);
}
.hero-banner .btn:hover {
	border: 3px solid var(--clr-primary-5);
	color: var(--clr-primary-5);
	background: var(--mainWhite);
}

@media screen and (min-width: 768px) {
	.hero-banner p {
		font-size: 1.25rem;
		font-weight: 500;
	}
	.hero-header {
		background: linear-gradient(
				hsla(216, 99%, 50%, 0.3),
				hsla(216, 99%, 50%, 0.3)
			),
			url('../images/main-3.jpg') center/cover fixed no-repeat;
	}
	.hero-banner .btn {
		background: var(--clr-primary-5);
	}
}

/* 
========================================
Main Cards
========================================
*/

.title {
	text-align: center;
	/* margin-bottom: 3rem; */
}

.cards {
	padding: 4rem 0;
}

/* cards-center is our css grid parent container */
.cards-center {
	/* border: 2px solid red; */
	width: 80vw;
	max-width: 1170px;
	margin: 2rem auto;
}

.card {
	border: 2px solid var(--clr-primary-5);
	margin-bottom: 3rem;
	/* border-bottom-right-radius: var(--borderRadius); */
	/* border-bottom-left-radius: var(--borderRadius); */
}

/* this styling makes sure if we use images that have differing heights and widths that they all are treated the same and the layout isn't distorted */
.card img {
	aspect-ratio: 4 / 3;
	object-fit: cover;
}

.card-info {
	padding: 1rem;
}

.card-footer {
	background: var(--clr-primary-5);
	padding: 0.5rem 1rem;
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	justify-items: center;
}

.card-footer span {
	color: var(--clr-primary-10);
	transition: var(--mainTransition);
}
.card-footer span:hover {
	color: var(--mainWhite);
	transform: scale(1.3);
	cursor: pointer;
}

/* you'll note as we add columns that the layout may change because we may have differing amount of text content...and this throws off the layout.  How to handle it?  Well we can turn our card into a grid */

/* HANDLING CONTENT WITHIN A CARD - TURNING A CARD INTO A 1-COLUMN GRID */

/* the content within the card because each a row - so we have three rows - <img>, card-info and the card-footer.  We then set up the columns to be '1fr' and the rows to be defined to handle the varying content.  The important one below is the varying amount of card-info text so we've set it to 1fr to mean 'take up all available needed space.' */

.card {
	display: grid;
	grid-template-columns: 1fr;
	grid-template-rows: auto 1fr auto;
}

/* adding columns to our layout using media queries  */

/* to create a two column layout we'll target the parent container, and make it a css grid */
/* @media screen and (min-width: 768px) {
    .cards-center{
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        grid-column-gap: 2rem;
        
    }
} */
/* to create a three column layout we'll target the parent container, and make it a css grid */
/* @media screen and (min-width: 1170px) {
    .cards-center{
        grid-template-columns: repeat(3, 1fr);
        gap: 0 1.5rem;
        
    }
} */

/* how to set up column layouts without using media queries */

/* start with what will be my 'max screen'? we've set a max-width for the cards-center at 1170px.  This is an important number to remember.

next, we need to determine how many columns we want to display on the bigger screen.  In this case, we want to display 3 columns.  So, we'll divide 1170 by 3, which gives us 390px.  This is the width of each column.

the last thing to decide is what will be my gap?  If we have three columns there will be two gaps and if we have four there will be three gaps...you get the picture.  1rem = 16px so 2rem will equal 32px.  This is the gap between the columns.  So if we have two columns we'll have 2 gaps so 2 * 32px = 64px.  This is the total gap between the columns.

one column is 1170 - 64px = 1106px. Then we divide this by the number of columns we want to display.  1106 / 3 = 368.6666666666667px.  This is the width of each column.  

For a four column layout the math would be 1170 - 96 = 1074px.  1074 / 4 = 268.5px.  This is the width of each column.  The gap would be 3 * 32 = 96px.  This is the total gap between the columns.

if we wanted a 5 column layout...the math would be 1170 - 128 = 1042px.  1042 / 5 = 208.4px.  This is the width of each column.  The gap would be 4 * 32 = 128px.  This is the total gap between the columns.

*/

.cards-center {
	display: grid;
	grid-column-gap: 2rem;
	/* this below says 'create as many columns as we need, but the minium width of the column must be 368.66px.'  If there is room for more columns add them. If there is room for three columns then add another column.  We will end up with max three columns with this coding */
	/* remember with auto-fill, the css grid will still create columns so our layout will look good.  If however we used the auto-fit we'll end up with only one column and, if there are NOT enough items, the layout will change.  but in our case we have enough content so we are ok */
	/* john prefers the auto-fill */
	/* grid-template-columns: repeat(auto-fit, minmax(368.6666666666667px, 1fr)); */
	grid-template-columns: repeat(auto-fill, minmax(368.6666666666667px, 1fr));

	/* if we wanted a four column layout */
	/* grid-template-columns: repeat(auto-fill, minmax(268.5px, 1fr)); */

	/* if we wanted a five column layout */
	/* grid-template-columns: repeat(auto-fill, minmax(208.4px, 1fr)); */
}

.cards .btn{
	display: grid;
	justify-self: center;

}

/* 
========================================
Main Tiles
========================================
*/
.title {
	text-align: center;
	margin-bottom: 3rem;
}

.tiles {
	padding: 4rem 0;
}

.tiles .btn{
	display: grid;
	justify-self: center;
	margin-top: 3rem;

}

.tiles-center {
	width: 90vw;
	max-width: 1170px;
	margin: 2rem auto;
	display: grid;
	gap: 2rem 0;
}

@media screen and (min-width: 768px) {
	/* this .tiles img declaration fixes the wonky picture distortions that occur once we start changing our layout to add columns since there is overflow and image distortion */
	.tiles img {
		height: 100%;
		object-fit: cover;
	}

	.tiles-center {
		grid-template-columns: repeat(2, 1fr);
		gap: 2rem 2rem;
	}
}

@media screen and (min-width: 992px) {
	.tiles-center {
		grid-template-columns: repeat(3, 1fr);
	}
}

/* to set up our largest screen size we need to figure out how many columns and rows we'll want

1. in the design layout we have 4 columns
2. in the design layout we have 5 rows

these first two must be determined first from the design layout

*/

@media screen and (min-width: 1170px) {
	.tiles-center {
		grid-template-columns: repeat(4, 1fr);
		grid-template-rows: repeat(5, 200px);
		/* now we will use our grid-template areas */
		grid-template-areas:
			'a a a b'
			'a a a c'
			'd d d d'
			'e f f f'
			'e g h i';
	}

	/* this .tiles img declaration fixes the wonky picture distortions that occur once we start changing our layout to add columns since there is overflow and image distortion.  If we added in our first media query we don't need it here...but this is a good reminder that this is a fix */
	.tiles img {
		height: 100%;
		object-fit: cover;
	}

	.tile-1 {
		grid-area: a;
	}
	.tile-2 {
		grid-area: b;
	}
	.tile-3 {
		grid-area: c;
	}
	.tile-4 {
		grid-area: d;
	}
	.tile-5 {
		grid-area: e;
	}
	.tile-6 {
		grid-area: f;
	}
	.tile-7 {
		grid-area: g;
	}
	.tile-8 {
		grid-area: h;
	}
	.tile-9 {
		grid-area: i;
	}
}

/* 
========================================
Main Layout
========================================
*/

.header {
	background: var(--clr-primary-5);
	color: var(--mainWhite);
	text-align: center;
	padding: 1rem 0;
}

.navbar {
	background: var(--clr-primary-9);
}

.navbar li {
	list-style-type: none;
}
.navbar a {
	text-transform: capitalize;
	/* font-size: 1.2rem; */
	display: block;
	padding: 1rem;
	color: var(--clr-primary-5);
	font-weight: 600;
	letter-spacing: var(--mainSpacing);
	transition: var(--mainTransition);
}

.navbar a:hover {
	/* background: var(--clr-primary-5); */
	color: var(--clr-primary-1);
	padding: 1rem 1.5rem;
    /* transform: scale(1.2); */
}

.content {
	padding: 2rem;
}
.content h3 {
	text-align: center;
}

.content article {
	margin-bottom: 1.5rem;
}
.content p {
	font-size: 1rem;
	/* margin-bottom: 1.5rem; */
	text-align: center;
}

.sidebar {
	background: var(--clr-primary-5);
	padding: 1rem 0;
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	justify-items: center;
	color: var(--clr-primary-10);
	font-size: 1.2rem;
	transition: var(--mainTransition);
}

.sidebar span:hover {
	color: var(--clr-primary-1);
	transform: scale(1.5);
	cursor: pointer;
}

.footer {
	background: var(--clr-primary-1);
	color: var(--clr-primary-10);
	text-align: center;
	padding: 1rem 0;
	text-transform: capitalize;
}

.footer p {
	font-size: 1rem;
}

.main {
	min-height: 100vh;
	display: grid;
	grid-template-columns: 1fr;
	/* this declaration keeps the <p> content taking up as much space as needed */
	grid-template-rows: auto auto 1fr auto auto auto;
}

.main .btn {
	justify-self: center;
}

@media screen and (min-width: 768px) {
	.navbar ul {
		display: grid;
		grid-template-columns: repeat(4, 1fr);
		justify-items: center;
	}
    .navbar a:hover {
    transform: scale(1.2);
}
}

@media screen and (min-width: 992px) {
	.main {
		grid-template-columns: [start] 200px [col-1-end] 1fr [col-2-end] 70px [end];
		grid-template-rows: [start] auto [row-1-end] 1fr [row-2-end] auto [row-3-end] auto [end];
	}
	.header {
		grid-column: start / end;
		grid-row: start / row-1-end;
	}
	.navbar {
		grid-column: start / col-1-end;
		grid-row: row-1-end / row-3-end;
	}
	.content {
		grid-column: col-1-end / col-2-end;
		grid-row: row-1-end / row-2-end;
	}
	.sidebar {
		grid-column: col-2-end / end;
		grid-row: row-1-end / row-3-end;
	}
	.btn {
		grid-column: col-1-end / col-2-end;
		grid-row: row-2-end / row-3-end;
	}
	.footer {
		grid-column: start / end;
		grid-row: row-4-end / end;
	}
	.navbar ul {
		grid-template-columns: 1fr;
		align-items: center;
		min-height: 100%;
	}
	.sidebar {
		grid-template-columns: 1fr;
		align-items: center;
		min-height: 100%;
        background: var(--clr-primary-9);
        color: var(--clr-primary-);
	}
}

@media screen and (min-width: 1170px) {
	.main {
		grid-template-columns: 200px 1fr 70px;
		grid-template-rows: auto 1fr auto auto;
		grid-template-areas: 
		'header header header'
		'navbar content sidebar'
		'navbar button sidebar'
		'footer footer footer';
	}
	.header {
		grid-area: header;
		
	}
	.navbar {
		grid-area: navbar;
		background: var(--clr-primary-8);
		
	}
	.content {
		grid-area: content;
		
	}
	.sidebar {
		grid-area: sidebar;
		background: var(--clr-primary-8);
		
	}
	.btn {
		grid-area: button;
		
	}
	.footer {
		grid-area: footer;
	}
}
